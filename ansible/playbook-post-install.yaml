---
- hosts: proxmox_nodes
  # vars_prompt:
  #   - name: terraform_password
  #     prompt: "Enter the secret"
  #     private: true
  vars:
    # Network Configuration
    # management_ip: "192.168.1.100"
    # default_gateway: "192.168.1.1"
    # dns_servers: "8.8.8.8 8.8.4.4"
    # mtu_size: 9000

    # # ZFS Configuration
    # zfs_arc_max: "4294967296"  # 4GB
    # ashift_value: "12"

    # Security
    admin_user: "pve-admin"
    ssh_public_key: "{{ lookup('file', '/root/.ssh/id_ed25519.pub') }}"
    # ssh_allowed_ips: ["192.168.1.0/24"]
  roles:
    - cloud-init
  tasks:
    - name: Add pve-no-subscription repo for ceph
      ansible.builtin.replace:
        path: /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js
        regexp: '^(.*)\n(.*(No valid subscription).*)'
        replace: 'void ({ //Ext.Msg.show({\n\2'
    - name: Configure repositories
      block:
        - name: Add pve-no-subscription repo
          ansible.builtin.replace:
            path: /etc/apt/sources.list.d/pve-enterprise.list
            regexp: "^deb https://enterprise.proxmox.com/debian/pve"
            replace: "#deb https://enterprise.proxmox.com/debian/pve"
        - name: Add pve-no-subscription repo for ceph
          ansible.builtin.replace:
            path: /etc/apt/sources.list.d/ceph.list
            regexp: "^deb https://enterprise.proxmox.com/debian/ceph-quincy"
            replace: "#deb https://enterprise.proxmox.com/debian/ceph-quincy"
        - name: Add community repo
          ansible.builtin.apt_repository:
            repo: "deb http://download.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-no-subscription"
            state: present
            filename: pve-community
        - name: Add community repo for ceph
          ansible.builtin.apt_repository:
            repo: "deb http://download.proxmox.com/debian/ceph-quincy {{ ansible_distribution_release }} no-subscription"
            state: present
            filename: pve-community

    - name: List current PAM users
      ansible.builtin.command: pveum user list --output-format=json
      register: current_users

    - name: Extract current userids
      ansible.builtin.set_fact:
        current_userids: "{{ (current_users.stdout | ansible.builtin.from_json) | map(attribute='userid') | list }}"

    - name: Display the current userids
      ansible.builtin.debug:
        var: current_userids

    - name: Configure Terraform user for IAC
      block:
        - name: Add a new Terraform user
          ansible.builtin.command: pveum user add terraform@pam --comment "Ansible created user for Terraform iac"
        - name: Add a token for the newly created Terraform user
          ansible.builtin.command: pveum user token add terraform@pam terraform --output-format=json
          register: terraform_token
        - name: Convert the token string to a json
          ansible.builtin.set_fact:
            terraform_tokenid: "{{ (terraform_token.stdout | ansible.builtin.from_json)['full-tokenid'] }}"
            terraform_tokenvalue: "{{ (terraform_token.stdout | ansible.builtin.from_json)['value'] }}"
        - name: Display Token Credentials
          ansible.builtin.debug:
            msg: |
              terraform_tokenid: {{ terraform_tokenid }}
              terraform_tokenvalue: {{ terraform_tokenvalue }}
      when: "'terraform@pam' not in current_userids"

    - name: Update system and reboot
      debugger: on_failed
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist
        autoclean: yes
      notify: reboot_server

    # - name: Simple echo command
    #   ansible.builtin.command: echo "hello world"
    #   notify: reboot_server

    - name: Configure GRUB parameters
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: "^GRUB_CMDLINE_LINUX_DEFAULT="
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on"' # Removed  init_on_alloc=0
      notify: reboot_server

    # - name: Configure SSH hardening
    #   ansible.builtin.lineinfile:
    #     path: /etc/ssh/sshd_config
    #     regexp: "^#?AllowTcpForwarding.*"
    #     line: "AllowTcpForwarding no"
    #     backup: yes
    #     state: present
    #   when: "'sshd' in ansible_facts.packages"

    # - name: Setup firewall rules
    #   community.general.ufw:
    #     rule: "{{ item.rule }}"
    #     direction: "{{ item.direction }}"
    #     interface: "{{ item.interface | default(omit) }}"
    #     proto: "{{ item.proto | default('tcp') }}"
    #     src: "{{ item.src }}"
    #     dest_port: "{{ item.port }}"
    #     state: enabled
    #   loop:
    #     - { rule: allow, direction: in, proto: tcp, port: 8006, src: "{{ ssh_allowed_ips | join(',') }}" }
    #     - { rule: allow, direction: in, proto: tcp, port: 22, src: "{{ ssh_allowed_ips | join(',') }}" }

    - name: Install essential tools
      ansible.builtin.apt:
        name:
          - fail2ban
          - zfsutils-linux
          - iftop
          - iotop
          - qemu-guest-agent
          - vim
        state: present

    - name: Ensure TrueNAS Scale ISO file exists
      ansible.builtin.get_url:
        url: "https://download.sys.truenas.net/TrueNAS-SCALE-Fangtooth/25.04.0/TrueNAS-SCALE-25.04.0.iso"
        dest: "/var/lib/vz/template/iso"
        checksum: "sha256:ede23d4c70a7fde6674879346c1307517be9854dc79f6a5e016814226457f359"

    - name: Ensure the Debian Bookworm live netinst ISO exists
      ansible.builtin.get_url:
        url: "https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-12.10.0-amd64-netinst.iso"
        dest: "/var/lib/vz/template/iso"

    - name: Ensure the Ubuntu Jammy live server ISO file exists
      ansible.builtin.get_url:
        url: "https://ir.releases.ubuntu.com/22.04/ubuntu-22.04.5-live-server-amd64.iso"
        dest: "/var/lib/vz/template/iso"
        checksum: "sha256:9bc6028870aef3f74f4e16b900008179e78b130e6b0b9a140635434a46aa98b0"

    # The pve-admin needs to be created using proxmox specific commands.
    # - name: Create admin user with sudo
    #   ansible.builtin.user:
    #     name: "{{ admin_user }}"
    #     groups: sudo
    #     generate_ssh_key: true
    #     ssh_key_file: "{{ lookup('file', '/root/.ssh/id_ed25519') }}"
    #     ssh_key_comment: "ansible-generated on $HOSTNAME"
    #     # ssh_public_key: "{{ ssh_public_key }}"
    #     ssh_key_type: ed25519

    # - name: Disable root SSH access
    #   ansible.builtin.lineinfile:
    #     path: /etc/ssh/sshd_config
    #     regexp: '^PermitRootLogin'
    #     line: 'PermitRootLogin no'
    #   notify: restart_ssh
  handlers:
    - name: reboot_server
      ansible.builtin.reboot:
        msg: "Rebooting to apply kernel changes"
        reboot_command: shutdown -r now
        reboot_timeout: 300
